// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model User {
  // Needed for auth
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  displayName String?
  phone       String?
  username    String?
  college     String? @default("N.M.A.M. Institute of Technology")
  usn         String?
  lightTheme  String?
  darkTheme   String?
  role        Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Team Team[] @relation("UserTeam")
}

enum Role {
  USER
  ADMIN
}

model Account {
  type              String
  providerAccountId String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @default(cuid())

  title        String
  description  String?
  image        String
  date         DateTime
  time         String?
  reportLink   String?
  venue        String?
  category     EventCategory
  minTeamSize  Int           @default(1)
  maxTeamSize  Int           @default(1)
  type         EventType
  participants Team[]
  winners      Winners[]
  guests       String[]
  published    Boolean       @default(false)
}

model Team {
  id String @id @default(cuid())

  storyId     String?
  name        String?
  user        User[]        @relation("UserTeam")
  event       Event         @relation(fields: [eventId], references: [id])
  winner      Winners?
  attended    Boolean       @default(false)
  submissions Submissions[]

  eventId String
  story   Story? @relation(fields: [storyId], references: [id])
}

model Winners {
  id String @id @default(cuid())

  position Int
  teamId   String @unique
  eventId  String

  event Event @relation(fields: [eventId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
}

enum EventType {
  SOLO
  TEAM
}

enum EventCategory {
  PREVIOUS
  UPCOMING
  CURRENT
}

model Submissions {
  id String @id @default(cuid())

  teamId String
  round  Int
  link   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storyId String

  team Team @relation(fields: [teamId], references: [id])
}

model Story {
  id String @id @default(cuid())

  title       String
  description String?

  team Team[]
}
